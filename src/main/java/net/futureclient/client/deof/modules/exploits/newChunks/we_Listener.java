package net.futureclient.client.deof.modules.exploits.newChunks;

public class we_Listener {
}
/*
package net.futureclient.client;

import java.util.Iterator;
import net.futureclient.client.Ha;
import net.futureclient.client.K;
import net.futureclient.client.Uh;
import net.futureclient.client.Y;
import net.futureclient.client.YE;
import net.futureclient.client.ah;
import net.futureclient.client.kH;
import net.futureclient.client.sE;
import net.futureclient.client.vf;
import net.futureclient.client.wD;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.AxisAlignedBB;
import org.lwjgl.opengl.GL11;

public class we
extends Ha<sE> {
    public final vf f$d;

    public we(vf vf2) {
        0.f$d = vf2;
    }

    @Override
    public void f$E(sE sE2) {
        if (!sE2.f$E().equals((Object)YE.f$M)) {
            return;
        }
        boolean bl = GL11.glIsEnabled((int)2896);
        boolean bl2 = GL11.glIsEnabled((int)3042);
        boolean bl3 = GL11.glIsEnabled((int)3553);
        boolean bl4 = GL11.glIsEnabled((int)2929);
        boolean bl5 = GL11.glIsEnabled((int)2848);
        GL11.glPushMatrix();
        GL11.glDepthMask((boolean)false);
        if (bl) {
            GL11.glDisable((int)2896);
        }
        GL11.glBlendFunc((int)770, (int)771);
        if (!bl2) {
            GL11.glEnable((int)3042);
        }
        GL11.glLineWidth((float)0.5f);
        if (bl3) {
            GL11.glDisable((int)3553);
        }
        if (bl4) {
            GL11.glDisable((int)2929);
        }
        if (!bl5) {
            GL11.glEnable((int)2848);
        }
        wD wD2 = (wD)kH.f$E().f$E().f$E(wD.class);
        GL11.glColor4d((double)((float)wD2.f$a.getRed() / 255.0f), (double)((float)wD2.f$a.getGreen() / 255.0f), (double)((float)wD2.f$a.getBlue() / 255.0f), (double)1.0);
        wD2 = new Frustum();
        Object object = vf.f$C().getRenderViewEntity() == null ? vf.f$H().player : vf.f$h().getRenderViewEntity();
        wD2.setPosition(((Entity)object).lastTickPosX + (((Entity)object).posX - ((Entity)object).lastTickPosX) * (double)((Y)vf.f$A()).getTimer().renderPartialTicks, ((Entity)object).lastTickPosY + (((Entity)object).posY - ((Entity)object).lastTickPosY) * (double)((Y)vf.f$K()).getTimer().renderPartialTicks, ((Entity)object).lastTickPosZ + (((Entity)object).posZ - ((Entity)object).lastTickPosZ) * (double)((Y)vf.f$B()).getTimer().renderPartialTicks);
        object = vf.f$E(0.f$d).iterator();
        Iterator iterator = object;
        while (iterator.hasNext()) {
            ah ah2 = (ah)object.next();
            double d = ah2.f$g * 16;
            double d2 = ah2.f$d * 16;
            AxisAlignedBB axisAlignedBB = new AxisAlignedBB(d, 0.0, d2, d + 16.0, 0.0, d2 + 16.0);
            if (!wD2.isBoundingBoxInFrustum(axisAlignedBB)) {
                iterator = object;
                continue;
            }
            Uh.f$E(axisAlignedBB.offset(-((K)vf.f$e().getRenderManager()).getRenderPosX(), -((K)vf.f$a().getRenderManager()).getRenderPosY(), -((K)vf.f$E().getRenderManager()).getRenderPosZ()));
            iterator = object;
        }
        GL11.glColor4d((double)1.0, (double)1.0, (double)1.0, (double)1.0);
        if (!bl5) {
            GL11.glDisable((int)2848);
        }
        if (bl4) {
            GL11.glEnable((int)2929);
        }
        if (bl3) {
            GL11.glEnable((int)3553);
        }
        if (!bl2) {
            GL11.glDisable((int)3042);
        }
        if (bl) {
            GL11.glEnable((int)2896);
        }
        GL11.glDepthMask((boolean)true);
        GL11.glPopMatrix();
    }
}
 */