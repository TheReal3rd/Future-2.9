package net.futureclient.client.deof.modules.exploits.orebfuscator;

public class tf_Listener {
}
/*
package net.futureclient.client;

import java.awt.Color;
import net.futureclient.client.Ha;
import net.futureclient.client.K;
import net.futureclient.client.Uh;
import net.futureclient.client.YE;
import net.futureclient.client.aj;
import net.futureclient.client.kH;
import net.futureclient.client.oE;
import net.futureclient.client.sE;
import net.futureclient.client.wD;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import org.lwjgl.opengl.GL11;

public class tf
extends Ha<sE> {
    public final oE f$d;

    public tf(oE oE2) {
        0.f$d = oE2;
    }

    @Override
    public void f$E(sE sE2) {
        if (!sE2.f$E().equals((Object)YE.f$M)) {
            return;
        }
        if (((Boolean)oE.f$E(0.f$d).f$E()).booleanValue()) {
            tf tf2;
            Object object = (wD)kH.f$E().f$E().f$E(wD.class);
            object = new Color((float)((wD)object).f$a.getRed() / 255.0f, (float)((wD)object).f$a.getGreen() / 255.0f, (float)((wD)object).f$a.getBlue() / 255.0f, 0.6f);
            if (oE.f$a(0.f$d).size() > 1000) {
                tf tf3 = 0;
                tf2 = tf3;
                oE.f$a(tf3.f$d).clear();
            } else {
                for (BlockPos blockPos : oE.f$a(0.f$d)) {
                    double d = (double)blockPos.func_177958_n() - ((K)oE.f$j().getRenderManager()).getRenderPosX();
                    double d2 = (double)blockPos.func_177956_o() - ((K)oE.f$M().getRenderManager()).getRenderPosY();
                    double d3 = (double)blockPos.func_177952_p() - ((K)oE.f$C().getRenderManager()).getRenderPosZ();
                    if (!(oE.f$H().player.func_70011_f((double)blockPos.func_177958_n(), (double)blockPos.func_177956_o(), (double)blockPos.func_177952_p()) <= 128.0)) continue;
                    Uh.f$B();
                    aj.f$E(new AxisAlignedBB(d, d2, d3, d + 1.0, d2 + 1.0, d3 + 1.0), 1.0f, (Color)object);
                    Uh.f$e();
                }
                tf2 = 0;
            }
            if (oE.f$K(tf2.f$d) >= 0) {
                BlockPos blockPos = (BlockPos)oE.f$e(0.f$d).get(oE.f$K(0.f$d));
                double d = (double)blockPos.func_177958_n() - ((K)oE.f$h().getRenderManager()).getRenderPosX();
                double d4 = (double)blockPos.func_177956_o() - ((K)oE.f$A().getRenderManager()).getRenderPosY();
                double d5 = (double)blockPos.func_177952_p() - ((K)oE.f$K().getRenderManager()).getRenderPosZ();
                if (oE.f$B().player.func_70011_f((double)blockPos.func_177958_n(), (double)blockPos.func_177956_o(), (double)blockPos.func_177952_p()) <= 128.0) {
                    Uh.f$B();
                    aj.f$E(new AxisAlignedBB(d, d4, d5, d + 1.0, d4 + 1.0, d5 + 1.0), 1.0f, (Color)object);
                    Uh.f$e();
                }
                GL11.glColor4f((float)1.0f, (float)1.0f, (float)1.0f, (float)1.0f);
            }
        }
    }
}
 */